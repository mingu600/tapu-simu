{"version":3,"sources":["../src/sets.ts","../src/teams.ts"],"names":["tr","team"],"mappings":"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","sourcesContent":["import {\n  GenerationNum,\n  HPTypeName,\n  ID,\n  PokemonSet,\n  StatID,\n  StatsTable,\n} from '@pkmn/types';\n\nexport interface DataTable<T> {\n  get(name: string): Readonly<T> | undefined;\n}\n\ninterface Nature {\n  name: string;\n  plus?: Exclude<StatID, 'hp'>;\n  minus?: Exclude<StatID, 'hp'>;\n}\n\nexport interface Data {\n  forGen?(gen: GenerationNum): Data;\n\n  readonly gen: GenerationNum;\n\n  readonly abilities: DataTable<{name: string}>;\n  readonly items: DataTable<{name: string}>;\n  readonly moves: DataTable<{name: string}>;\n  readonly natures: DataTable<Nature>;\n  readonly species: DataTable<{\n    name: string;\n    baseSpecies: string;\n    baseStats: StatsTable;\n    gender?: string;\n    battleOnly?: string | string[];\n    abilities?: {0: string; 1?: string; H?: string; S?: string};\n    types?: string[];\n    forceTeraType?: string;\n  }>;\n}\n\nexport function toID(s: any) {\n  if (typeof s !== 'string' && typeof s !== 'number') return '';\n  return ('' + s).toLowerCase().replace(/[^a-z0-9]+/g, '') as ID;\n}\n\nconst STAT_NAMES: Readonly<StatsTable<string>> = {\n  hp: 'HP',\n  atk: 'Atk',\n  def: 'Def',\n  spa: 'SpA',\n  spd: 'SpD',\n  spe: 'Spe',\n};\n\nconst STATS = Object.keys(STAT_NAMES) as readonly StatID[];\n\nconst DECODE_STAT: Readonly<{[name: string]: StatID}> = {\n  HP: 'hp',\n  hp: 'hp',\n  Attack: 'atk',\n  Atk: 'atk',\n  atk: 'atk',\n  Defense: 'def',\n  Def: 'def',\n  def: 'def',\n  'Special Attack': 'spa',\n  SpA: 'spa',\n  SAtk: 'spa',\n  SpAtk: 'spa',\n  spa: 'spa',\n  Special: 'spa',\n  spc: 'spa',\n  Spc: 'spa',\n  'Special Defense': 'spd',\n  SpD: 'spd',\n  SDef: 'spd',\n  SpDef: 'spd',\n  spd: 'spd',\n  Speed: 'spe',\n  Spe: 'spe',\n  Spd: 'spe',\n  spe: 'spe',\n};\n\nexport type {PokemonSet} from '@pkmn/types';\n\nexport const Sets = new class {\n  pack(s: Partial<PokemonSet>) {\n    return Sets.packSet(s);\n  }\n\n  packSet(s: Partial<PokemonSet>) {\n    let buf = '';\n    // name\n    buf += s.name || s.species;\n\n    // species\n    const packed = packName(s.species);\n    buf += '|' + (packName(s.name || s.species) === packed ? '' : packed);\n\n    // item\n    buf += '|' + packName(s.item);\n\n    // ability\n    buf += '|' + (packName(s.ability) || '-');\n\n    // moves\n    let hasHP = '';\n    buf += '|';\n    if (s.moves) {\n      for (let j = 0; j < s.moves.length; j++) {\n        const packedMove = packName(s.moves[j]);\n        if (j && !packedMove) continue;\n        buf += (j ? ',' : '') + packedMove;\n        if (packedMove.substr(0, 11) === 'HiddenPower' && packedMove.length > 11) {\n          hasHP = packedMove.slice(11);\n        }\n      }\n    }\n\n    // nature\n    buf += '|' + (s.nature || '');\n\n    // evs\n    let evs = '|';\n    if (s.evs) {\n      evs = '|' +\n        (s.evs['hp'] || '') + ',' +\n        (s.evs['atk'] || '') + ',' +\n        (s.evs['def'] || '') + ',' +\n        (s.evs['spa'] || '') + ',' +\n        (s.evs['spd'] || '') + ',' +\n        (s.evs['spe'] || '');\n    }\n    if (evs === '|,,,,,') {\n      buf += '|';\n    } else {\n      buf += evs;\n    }\n\n    // gender\n    if (s.gender) {\n      buf += '|' + s.gender;\n    } else {\n      buf += '|';\n    }\n\n    const getIV = (stat: StatID) =>\n      !('ivs' in s) || s.ivs![stat] === 31 || s.ivs![stat] === undefined\n        ? ''\n        : s.ivs![stat].toString();\n\n    // ivs\n    let ivs = '|';\n    if (s.ivs) {\n      ivs = '|' +\n        getIV('hp') + ',' +\n        getIV('atk') + ',' +\n        getIV('def') + ',' +\n        getIV('spa') + ',' +\n        getIV('spd') + ',' +\n        getIV('spe');\n    }\n    if (ivs === '|,,,,,') {\n      buf += '|';\n    } else {\n      buf += ivs;\n    }\n\n    // shiny\n    if (s.shiny) {\n      buf += '|S';\n    } else {\n      buf += '|';\n    }\n\n    // level\n    if (s.level && s.level !== 100) {\n      buf += '|' + s.level;\n    } else {\n      buf += '|';\n    }\n\n    // happiness\n    if (s.happiness !== undefined && s.happiness !== 255) {\n      buf += '|' + s.happiness;\n    } else {\n      buf += '|';\n    }\n\n    const dynamax = s.dynamaxLevel !== undefined && s.dynamaxLevel !== 10;\n    if (s.pokeball || (s.hpType && !hasHP) || s.gigantamax || dynamax || s.teraType) {\n      buf += ',' + (s.hpType || '');\n      buf += ',' + packName(s.pokeball || '');\n      buf += ',' + (s.gigantamax ? 'G' : '');\n      buf += ',' + (dynamax ? s.dynamaxLevel : '');\n      buf += ',' + (s.teraType || '');\n    }\n\n    return buf;\n  }\n\n  exportSet(s: Partial<PokemonSet>, data?: Data) {\n    let buf = '';\n    let species = s.species || s.name || '';\n    species = data?.species.get(species)?.name || species;\n    if (s.name && s.name !== species) {\n      buf += '' + s.name + ' (' + species + ')';\n    } else {\n      buf += '' + species;\n    }\n    if (!data || data.gen >= 2) {\n      if (s.gender === 'M') buf += ' (M)';\n      if (s.gender === 'F') buf += ' (F)';\n    }\n    if (s.item) {\n      const item = data?.items.get(s.item)?.name ?? s.item;\n      buf += ' @ ' + item;\n    }\n    buf += '  \\n';\n    if (s.ability && (!data || data?.gen >= 3)) {\n      const ability = data?.abilities.get(s.ability)?.name ?? s.ability;\n      buf += 'Ability: ' + ability + '  \\n';\n    }\n    if (s.level && s.level !== 100) {\n      buf += 'Level: ' + s.level + '  \\n';\n    }\n    if (s.shiny && (!data || data.gen >= 2)) {\n      buf += 'Shiny: Yes  \\n';\n    }\n    if (typeof s.happiness === 'number' && s.happiness !== 255 &&\n        !isNaN(s.happiness) && (!data || data.gen >= 2)) {\n      buf += 'Happiness: ' + s.happiness + '  \\n';\n    }\n    if (s.pokeball) {\n      buf += 'Pokeball: ' + s.pokeball + '  \\n';\n    }\n    if (s.hpType) {\n      buf += 'Hidden Power: ' + s.hpType + '  \\n';\n    }\n    if (typeof s.dynamaxLevel === 'number' && s.dynamaxLevel !== 10 && !isNaN(s.dynamaxLevel)) {\n      buf += 'Dynamax Level: ' + s.dynamaxLevel + '  \\n';\n    }\n    if (s.gigantamax) {\n      buf += 'Gigantamax: Yes  \\n';\n    }\n    if (s.teraType) {\n      const d = data?.species.get(species);\n      buf += 'Tera Type: ' + (d?.forceTeraType || s.teraType || d?.types?.[0]) + '  \\n';\n    }\n    let first = true;\n    if (s.evs && (!data || data.gen >= 3)) {\n      for (const stat of STATS) {\n        if (!s.evs[stat]) continue;\n        if (first) {\n          buf += 'EVs: ';\n          first = false;\n        } else {\n          buf += ' / ';\n        }\n        buf += '' + s.evs[stat] + ' ' + STAT_NAMES[stat];\n      }\n    }\n    if (!first) {\n      buf += '  \\n';\n    }\n    if (s.nature && (!data || data.gen >= 3)) {\n      buf += '' + s.nature + ' Nature' + '  \\n';\n    }\n    first = true;\n    if (s.ivs) {\n      let defaultIVs = true;\n      let hpType: HPTypeName|undefined = undefined;\n      if (s.moves) {\n        for (const move of s.moves) {\n          hpType = getHiddenPowerType(move);\n          if (hpType) {\n            const hpIVs = getHiddenPowerIVs(hpType, data);\n            // not a valid Hidden Power type\n            if (!hpIVs) continue;\n\n            for (const stat of STATS) {\n              if ((s.ivs[stat] === undefined ? 31 : s.ivs[stat]) !== (hpIVs[stat] || 31)) {\n                defaultIVs = false;\n                break;\n              }\n            }\n          }\n        }\n      }\n      if (defaultIVs && !hpType) {\n        for (const stat of STATS) {\n          if (s.ivs[stat] !== 31 && s.ivs[stat] !== undefined) {\n            defaultIVs = false;\n            break;\n          }\n        }\n      }\n      if (!defaultIVs) {\n        for (const stat of STATS) {\n          if (typeof s.ivs[stat] === 'undefined' || isNaN(s.ivs[stat]) || s.ivs[stat] === 31) {\n            continue;\n          }\n          if (first) {\n            buf += 'IVs: ';\n            first = false;\n          } else {\n            buf += ' / ';\n          }\n          buf += '' + s.ivs[stat] + ' ' + STAT_NAMES[stat];\n        }\n      }\n    }\n    if (!first) {\n      buf += '  \\n';\n    }\n    if (s.moves) {\n      for (let move of s.moves) {\n        if (move) {\n          move = data?.moves.get(move)?.name ?? move;\n          buf += '- ' + exportMove(move) + '  \\n';\n        }\n      }\n    }\n    buf += '\\n';\n\n    return buf;\n  }\n\n  unpack(buf: string, data?: Data) {\n    return Sets.unpackSet(buf, data);\n  }\n\n  unpackSet(buf: string, data?: Data) {\n    return _unpack(buf, 0, 0, data).set;\n  }\n\n  importSet(buf: string, data?: Data) {\n    return _import(buf.split('\\n'), 0, data).set;\n  }\n\n  toJSON(s: PokemonSet) {\n    return JSON.stringify(s);\n  }\n\n  fromJSON(json: string) {\n    if (!json.startsWith('{') || !json.endsWith('}')) return undefined;\n    // BUG: this is completely unvalidated...\n    return JSON.parse(json) as PokemonSet;\n  }\n\n  toString(s: Partial<PokemonSet>, data?: Data) {\n    return Sets.exportSet(s, data);\n  }\n\n  fromString(str: string) {\n    return Sets.importSet(str);\n  }\n\n  // NOTE: to properly dedupe you still must compare computed stats\n  canonicalize(s: Partial<PokemonSet>, data: Data) {\n    const species = data.species.get(s.species!)!;\n    s.species = toID(species.battleOnly ? species.baseSpecies : species.name);\n    s.name = undefined;\n\n    s.item = data.gen >= 2 && s.item ? toID(s.item) : undefined;\n    s.ability =\n      data.gen >= 3 ? toID(s.ability ? s.ability : species.abilities![0]) : undefined;\n    s.gender = data.gen >= 2 && s.gender && s.gender !== species.gender ? s.gender : undefined;\n    s.level = s.level || 100;\n\n    let maxed = true;\n    if (!s.ivs) {\n      s.ivs = {hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31};\n    } else {\n      for (const stat of STATS) {\n        s.ivs[stat] = s.ivs[stat] ?? 31;\n        if (data.gen < 3) s.ivs[stat] = toIV(toDV(s.ivs[stat]));\n        if (s.ivs[stat] !== 31) maxed = false;\n      }\n    }\n\n    const nature = data.gen < 3 ? undefined : data.natures.get(s.nature || 'serious');\n    s.nature = nature && toID(nature.name);\n\n    let hpType = s.hpType as HPTypeName | undefined;\n    let happiness = '';\n    let swordsdance = false;\n    const moves = [];\n    for (const move of s.moves!) {\n      let id = toID(move);\n      if (id === 'return' || id === 'frustration') {\n        happiness = id;\n      } else if (id === 'swordsdance') {\n        swordsdance = true;\n      } else if (id.startsWith('hiddenpower')) {\n        if (id === 'hiddenpower') {\n          const type = s.hpType || getHiddenPower(data.gen, s.ivs).type;\n          id = `${id}${type}` as ID;\n        } else {\n          hpType = (id.substr(11, 1).toUpperCase() + id.substr(12)) as HPTypeName;\n        }\n      }\n      moves.push(id);\n    }\n    s.moves = moves.sort((a, b) => a.localeCompare(b));\n\n    const base = data.species.get(s.species)!.baseStats;\n    s.evs = s.evs || {} as any as StatsTable;\n    for (const stat of STATS) {\n      if (data.gen < 3) {\n        s.evs[stat] = s.evs[stat] ?? 252;\n      } else {\n        if (!s.evs[stat]) {\n          s.evs[stat] = 0;\n        } else {\n          const val = calc(data.gen, stat, base[stat], s.ivs[stat], s.evs[stat], s.level, nature);\n          if (stat === 'hp') {\n            s.evs[stat] = base[stat] === 1 ? 0\n              : Math.max(0, (Math.ceil(((val - s.level - 10) * 100) / s.level) -\n                2 * base[stat] - s.ivs[stat]) * 4);\n          } else {\n            const n = !nature ? 1 : nature.plus === stat ? 1.1 : nature.minus === stat ? 0.9 : 1;\n            s.evs[stat] = Math.max(0, (Math.ceil(((Math.ceil(val / n) - 5) * 100) / s.level) -\n              2 * base[stat] - s.ivs[stat]) * 4);\n          }\n        }\n      }\n    }\n\n    if (data.gen === 2 && s.species === 'marowak' && s.item === 'thickclub' &&\n      swordsdance && s.level === 100) {\n      const iv = Math.floor(s.ivs.atk / 2) * 2;\n      while (s.evs.atk > 0 && 2 * 80 + iv + Math.floor(s.evs.atk / 4) + 5 > 255) {\n        s.evs.atk -= 4;\n      }\n    }\n\n    const canBottle = data.gen >= 7 && s.level === 100;\n    if (hpType && maxed) {\n      const ivs = data.gen === 2 ? HP[hpType].dvs : HP[hpType].ivs;\n      for (const stat of STATS) {\n        if (data.gen === 2) {\n          s.ivs[stat] = stat in ivs ? toIV(ivs[stat]!) : 31;\n        } else if (!canBottle) {\n          s.ivs[stat] = ivs[stat] ?? 31;\n        }\n      }\n      if (data.gen === 2) s.ivs.hp = toIV(getHPDV(s.ivs));\n    }\n\n    s.hpType = hpType && canBottle ? hpType : undefined;\n\n    if (happiness === 'return') {\n      s.happiness = 255;\n    } else if (happiness === 'frustration') {\n      s.happiness = 0;\n    } else {\n      s.happiness = undefined;\n    }\n\n    s.shiny = data.gen >= 2 && s.shiny ? s.shiny : undefined;\n    s.pokeball = undefined;\n    s.dynamaxLevel = data.gen === 8 ? s.dynamaxLevel : undefined;\n    s.gigantamax = data.gen === 8 && s.gigantamax ? s.gigantamax : undefined;\n    s.teraType = data.gen === 9 ? s.teraType : undefined;\n\n    return s;\n  }\n};\n\nconst ABILITY = ['', '0', '1', 'H', 'S'];\n\nexport function _unpack(buf: string, i = 0, j = 0, data?: Data) {\n  const s: Partial<PokemonSet> = {};\n  // name\n  j = buf.indexOf('|', i);\n  if (j < 0) return {i, j};\n  s.name = buf.substring(i, j);\n  i = j + 1;\n\n  // species\n  j = buf.indexOf('|', i);\n  if (j < 0) return {i, j};\n  s.species = unpackName(buf.substring(i, j), data?.species) || s.name;\n  i = j + 1;\n\n  // item\n  j = buf.indexOf('|', i);\n  if (j < 0) return {i, j};\n  s.item = unpackName(buf.substring(i, j), data?.items);\n  i = j + 1;\n\n  // ability\n  j = buf.indexOf('|', i);\n  if (j < 0) return {i, j};\n  let ability = unpackName(buf.substring(i, j), data?.abilities);\n  if (ability === '-') {\n    ability = '';\n  } else if (ABILITY.includes(ability)) {\n    if (data) {\n      const species = data.species.get(s.species);\n      // Workaround for bug introduced by smogon/pokemon-showdown/817236b0\n      if (species?.baseSpecies === 'Zygarde' && ability === 'H') {\n        ability = 'Power Construct';\n      } else if (species?.abilities) {\n        ability = species.abilities[ability as '0' || '0'];\n      }\n    }\n    if (ability !== '' && !ability) return {i, j};\n  }\n  s.ability = ability;\n  i = j + 1;\n\n  // moves\n  j = buf.indexOf('|', i);\n  if (j < 0) return {i, j};\n  s.moves = buf.substring(i, j).split(',', 24).filter(x => x).map(m => unpackName(m, data?.moves));\n  i = j + 1;\n\n  // nature\n  j = buf.indexOf('|', i);\n  if (j < 0) return {i, j};\n  s.nature = unpackName(buf.substring(i, j), data?.natures);\n  i = j + 1;\n\n  // evs\n  j = buf.indexOf('|', i);\n  if (j < 0) return {i, j};\n  s.evs = {hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0};\n  if (j !== i) {\n    const evstr = buf.substring(i, j);\n    if (evstr.length > 5) {\n      const st = evstr.split(',');\n      s.evs.hp = Number(st[0]) || s.evs.hp;\n      s.evs.atk = Number(st[1]) || s.evs.atk;\n      s.evs.def = Number(st[2]) || s.evs.def;\n      s.evs.spa = Number(st[3]) || s.evs.spa;\n      s.evs.spd = Number(st[4]) || s.evs.spd;\n      s.evs.spe = Number(st[5]) || s.evs.spe;\n    }\n  }\n  i = j + 1;\n\n  // gender\n  j = buf.indexOf('|', i);\n  if (j < 0) return {i, j};\n  if (i !== j) s.gender = buf.substring(i, j);\n  i = j + 1;\n\n  // ivs\n  j = buf.indexOf('|', i);\n  if (j < 0) return {i, j};\n  s.ivs = {hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31};\n  if (j !== i) {\n    const st = buf.substring(i, j).split(',', 6);\n    s.ivs.hp = st[0] === '' ? 31 : Number(st[0]) || 0;\n    s.ivs.atk = st[1] === '' ? 31 : Number(st[1]) || 0;\n    s.ivs.def = st[2] === '' ? 31 : Number(st[2]) || 0;\n    s.ivs.spa = st[3] === '' ? 31 : Number(st[3]) || 0;\n    s.ivs.spd = st[4] === '' ? 31 : Number(st[4]) || 0;\n    s.ivs.spe = st[5] === '' ? 31 : Number(st[5]) || 0;\n  }\n  i = j + 1;\n\n  // shiny\n  j = buf.indexOf('|', i);\n  if (j < 0) return {i, j};\n  if (i !== j) s.shiny = true;\n  i = j + 1;\n\n  // level\n  j = buf.indexOf('|', i);\n  if (j < 0) return {i, j};\n  if (i !== j) s.level = parseInt(buf.substring(i, j));\n  i = j + 1;\n\n  // happiness\n  j = buf.indexOf(']', i);\n  let misc;\n  if (j < 0) {\n    if (i < buf.length) misc = buf.substring(i).split(',', 6);\n  } else {\n    if (i !== j) misc = buf.substring(i, j).split(',', 6);\n  }\n\n  if (misc) {\n    s.happiness = (misc[0] ? Number(misc[0]) : 255);\n    s.hpType = misc[1] || '';\n    s.pokeball = unpackName(misc[2] || '', data?.items);\n    s.gigantamax = !!misc[3];\n    s.dynamaxLevel = (misc[4] ? Number(misc[4]) : 10);\n    s.teraType = misc[5] || '';\n  }\n\n  return {set: s as PokemonSet, i, j};\n}\n\nconst NATURE_REGEX = /^[A-Za-z]+ (N|n)ature/;\n\nexport function _import(lines: string[], i = 0, data?: Data) {\n  let s: Partial<PokemonSet> | undefined = undefined;\n  for (; i < lines.length; i++) {\n    let line = lines[i].trim();\n    if (line === '' || line === '---' || line.substr(0, 3) === '===' ||\n        line.includes('|')) {\n      return {set: s as PokemonSet, line: i};\n    } else if (!s) {\n      s = {name: '', species: '', gender: ''};\n      const atIndex = line.lastIndexOf(' @ ');\n      if (atIndex !== -1) {\n        s.item = line.substr(atIndex + 3);\n        if (toID(s.item) === 'noitem') s.item = '';\n        line = line.substr(0, atIndex);\n      }\n      if (line.substr(line.length - 4) === ' (M)') {\n        s.gender = 'M';\n        line = line.substr(0, line.length - 4);\n      }\n      if (line.substr(line.length - 4) === ' (F)') {\n        s.gender = 'F';\n        line = line.substr(0, line.length - 4);\n      }\n      const parenIndex = line.lastIndexOf(' (');\n      if (line.substr(line.length - 1) === ')' && parenIndex !== -1) {\n        line = line.substr(0, line.length - 1);\n        const sub = line.substr(parenIndex + 2);\n        s.species = data?.species.get(sub)?.name ?? sub;\n        line = line.substr(0, parenIndex);\n        s.name = line;\n      } else {\n        s.species = data?.species.get(line)?.name ?? line;\n        s.name = '';\n      }\n    } else if (line.substr(0, 7) === 'Trait: ') {\n      line = line.substr(7);\n      s.ability = line;\n    } else if (line.substr(0, 9) === 'Ability: ') {\n      line = line.substr(9);\n      s.ability = line;\n    } else if (line === 'Shiny: Yes') {\n      s.shiny = true;\n    } else if (line.substr(0, 7) === 'Level: ') {\n      line = line.substr(7);\n      s.level = +line;\n    } else if (line.substr(0, 11) === 'Happiness: ') {\n      line = line.substr(11);\n      s.happiness = +line;\n    } else if (line.substr(0, 10) === 'Pokeball: ') {\n      line = line.substr(10);\n      s.pokeball = line;\n    } else if (line.substr(0, 14) === 'Hidden Power: ') {\n      line = line.substr(14);\n      s.hpType = line;\n    } else if (line.substr(0, 11) === 'Tera Type: ') {\n      line = line.substr(11);\n      s.teraType = line;\n    } else if (line.substr(0, 15) === 'Dynamax Level: ') {\n      line = line.substr(15);\n      s.dynamaxLevel = +line;\n    } else if (line === 'Gigantamax: Yes') {\n      s.gigantamax = true;\n    } else if (line.substr(0, 5) === 'EVs: ') {\n      line = line.substr(5);\n      const evLines = line.split(' / ');\n      s.evs = {hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0};\n      for (const evLine of evLines) {\n        const spaceIndex = evLine.indexOf(' ');\n        if (spaceIndex === -1) continue;\n        const stat = DECODE_STAT[evLine.substr(spaceIndex + 1)];\n        const val = parseInt(evLine.substr(0, spaceIndex));\n        if (!stat) continue;\n        s.evs[stat] = val;\n      }\n    } else if (line.substr(0, 5) === 'IVs: ') {\n      line = line.substr(5);\n      const ivLines = line.split(' / ');\n      s.ivs = {hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31};\n      for (const ivLine of ivLines) {\n        const spaceIndex = ivLine.indexOf(' ');\n        if (spaceIndex === -1) continue;\n        const stat = DECODE_STAT[ivLine.substr(spaceIndex + 1)];\n        let val = parseInt(ivLine.substr(0, spaceIndex));\n        if (!stat) continue;\n        if (isNaN(val)) val = 31;\n        s.ivs[stat] = val;\n      }\n    } else if (NATURE_REGEX.exec(line)) {\n      let natureIndex = line.indexOf(' Nature');\n      if (natureIndex === -1) natureIndex = line.indexOf(' nature');\n      // if (natureIndex === -1) continue; // Can't happen or we wouldn't match\n      line = line.substr(0, natureIndex);\n      if (line !== 'undefined') s.nature = line;\n    } else if (line.substr(0, 1) === '-' || line.substr(0, 1) === '~') {\n      line = line.substr(1);\n      if (line.substr(0, 1) === ' ') line = line.substr(1);\n      if (!s.moves) s.moves = [];\n\n      const hpType = getHiddenPowerType(line);\n      if (hpType) {\n        line = 'Hidden Power ' + hpType.toString();\n        const hpIVs = getHiddenPowerIVs(hpType, data);\n        if (!s.ivs && hpIVs) {\n          s.ivs = {hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31};\n          let stat: StatID;\n          for (stat in hpIVs) {\n            s.ivs[stat] = hpIVs[stat]!;\n          }\n        }\n      }\n      if (line === 'Frustration' && s.happiness === undefined) {\n        s.happiness = 0;\n      }\n      s.moves.push(line);\n    }\n  }\n\n  return {set: s!, line: i + 1};\n}\n\nfunction getHiddenPowerType(move: string) {\n  if (move.substr(0, 14) === 'Hidden Power [') {\n    return move.substr(14, move.length - 15) as HPTypeName;\n  }\n  if (move.substr(0, 13) === 'Hidden Power ') {\n    return move.substr(13) as HPTypeName;\n  }\n  if (move.substr(0, 11) === 'hiddenpower') {\n    return (move.substr(11, 1).toUpperCase() + move.substr(12)) as HPTypeName;\n  }\n  return undefined;\n}\n\nfunction exportMove(move: string) {\n  if (move.substr(0, 14) === 'Hidden Power [') {\n    return move;\n  }\n  if (move.substr(0, 13) === 'Hidden Power ') {\n    return move.substr(0, 13) + '[' + move.substr(13) + ']';\n  }\n  if (move.substr(0, 11) === 'hiddenpower') {\n    return 'Hidden Power ' +\n        '[' + move.substr(11, 1).toUpperCase() + move.substr(12) + ']';\n  }\n  return move;\n}\n\nfunction packName(name: string | undefined | null) {\n  if (!name) return '';\n  return name.replace(/[^A-Za-z0-9]+/g, '');\n}\n\nfunction unpackName(\n  name: string,\n  data?: {get: (name: string) => {name: string; exists?: boolean} | undefined}\n) {\n  if (!name) return '';\n  if (data) {\n    const obj = data.get(name);\n    if (obj?.exists) return obj.name;\n  }\n  return (name.replace(/([0-9]+)/g, ' $1 ')\n    .replace(/([A-Z])/g, ' $1')\n    .replace(/[ ][ ]/g, ' ')\n    .trim());\n}\n\nconst HP: {[type in HPTypeName]: {ivs: Partial<StatsTable>; dvs: Partial<StatsTable>}} = {\n  Bug: {ivs: {atk: 30, def: 30, spd: 30}, dvs: {atk: 13, def: 13}},\n  Dark: {ivs: {}, dvs: {}},\n  Dragon: {ivs: {atk: 30}, dvs: {def: 14}},\n  Electric: {ivs: {spa: 30}, dvs: {atk: 14}},\n  Fighting: {ivs: {def: 30, spa: 30, spd: 30, spe: 30}, dvs: {atk: 12, def: 12}},\n  Fire: {ivs: {atk: 30, spa: 30, spe: 30}, dvs: {atk: 14, def: 12}},\n  Flying: {ivs: {hp: 30, atk: 30, def: 30, spa: 30, spd: 30}, dvs: {atk: 12, def: 13}},\n  Ghost: {ivs: {def: 30, spd: 30}, dvs: {atk: 13, def: 14}},\n  Grass: {ivs: {atk: 30, spa: 30}, dvs: {atk: 14, def: 14}},\n  Ground: {ivs: {spa: 30, spd: 30}, dvs: {atk: 12}},\n  Ice: {ivs: {atk: 30, def: 30}, dvs: {def: 13}},\n  Poison: {ivs: {def: 30, spa: 30, spd: 30}, dvs: {atk: 12, def: 14}},\n  Psychic: {ivs: {atk: 30, spe: 30}, dvs: {def: 12}},\n  Rock: {ivs: {def: 30, spd: 30, spe: 30}, dvs: {atk: 13, def: 12}},\n  Steel: {ivs: {spd: 30}, dvs: {atk: 13}},\n  Water: {ivs: {atk: 30, def: 30, spa: 30}, dvs: {atk: 14, def: 13}},\n};\n\nconst HP_TYPES: HPTypeName[] = [\n  'Fighting', 'Flying', 'Poison', 'Ground', 'Rock', 'Bug', 'Ghost', 'Steel',\n  'Fire', 'Water', 'Grass', 'Electric', 'Psychic', 'Ice', 'Dragon', 'Dark',\n];\n\nfunction getHiddenPower(gen: GenerationNum, ivs: StatsTable) {\n  const tr = (num: number, bits = 0) => {\n    if (bits) return (num >>> 0) % (2 ** bits);\n    return num >>> 0;\n  };\n  const stats = {hp: 31, atk: 31, def: 31, spe: 31, spa: 31, spd: 31};\n  if (gen <= 2) {\n    // Gen 2 specific Hidden Power check. IVs are still treated 0-31 so we get them 0-15\n    const atkDV = tr(ivs.atk / 2);\n    const defDV = tr(ivs.def / 2);\n    const speDV = tr(ivs.spe / 2);\n    const spcDV = tr(ivs.spa / 2);\n    return {\n      type: HP_TYPES[4 * (atkDV % 4) + (defDV % 4)],\n      power: tr(\n        (5 * ((spcDV >> 3) +\n          (2 * (speDV >> 3)) +\n          (4 * (defDV >> 3)) +\n          (8 * (atkDV >> 3))) +\n          (spcDV % 4)) / 2 + 31\n      ),\n    };\n  } else {\n    // Hidden Power check for Gen 3 onwards\n    let hpTypeX = 0;\n    let hpPowerX = 0;\n    let i = 1;\n    for (const s in stats) {\n      hpTypeX += i * (ivs[s as StatID] % 2);\n      hpPowerX += i * (tr(ivs[s as StatID] / 2) % 2);\n      i *= 2;\n    }\n    return {\n      type: HP_TYPES[tr(hpTypeX * 15 / 63)],\n      // After Gen 6, Hidden Power is always 60 base power\n      power: (gen < 6) ? tr(hpPowerX * 40 / 63) + 30 : 60,\n    };\n  }\n}\n\nfunction getHiddenPowerIVs(hpType: HPTypeName, data?: Data) {\n  const hp = HP[hpType];\n  if (!hp) return undefined;\n  return data?.gen === 2 ? DVsToIVs(hp.dvs) : hp.ivs;\n}\n\nfunction DVsToIVs(dvs: Readonly<Partial<StatsTable>>) {\n  const ivs: Partial<StatsTable> = {};\n  let dv: StatID;\n  for (dv in dvs) ivs[dv] = toIV(dvs[dv]!);\n  return ivs;\n}\n\nfunction toDV(iv: number) {\n  return Math.floor(iv / 2);\n}\n\nfunction toIV(dv: number) {\n  return dv * 2 + 1;\n}\n\nfunction getHPDV(ivs: Partial<StatsTable>) {\n  return (\n    (toDV(ivs.atk === undefined ? 31 : ivs.atk) % 2) * 8 +\n    (toDV(ivs.def === undefined ? 31 : ivs.def) % 2) * 4 +\n    (toDV(ivs.spe === undefined ? 31 : ivs.spe) % 2) * 2 +\n    (toDV(ivs.spa === undefined ? 31 : ivs.spa) % 2)\n  );\n}\n\nconst tr = (num: number, bits = 0) => bits ? (num >>> 0) % (2 ** bits) : num >>> 0;\n\nfunction calc(\n  gen: GenerationNum,\n  stat: StatID,\n  base: number,\n  iv = 31,\n  ev?: number,\n  level = 100,\n  nature?: Nature\n) {\n  if (ev === undefined) ev = gen < 3 ? 252 : 0;\n  if (gen < 3) {\n    iv = toDV(iv) * 2;\n    nature = undefined;\n  }\n  if (stat === 'hp') {\n    return base === 1 ? base : tr(tr(2 * base + iv + tr(ev / 4) + 100) * level / 100 + 10);\n  } else {\n    const val = tr(tr(2 * base + iv + tr(ev / 4)) * level / 100 + 5);\n    if (nature !== undefined) {\n      if (nature.plus === stat) return tr(tr(val * 110, 16) / 100);\n      if (nature.minus === stat) return tr(tr(val * 90, 16) / 100);\n    }\n    return val;\n  }\n}\n","/* eslint-disable @typescript-eslint/parameter-properties */\nimport {GenerationNum, ID, PokemonSet} from '@pkmn/types';\n\nimport {Data, Sets, _import, _unpack} from './sets';\n\nconst CURRENT = 9;\n\nexport class Team<S extends Partial<PokemonSet> = PokemonSet | Partial<PokemonSet>> {\n  constructor(\n    readonly team: S[],\n    readonly data?: Data,\n    readonly format?: string,\n    readonly name?: string,\n    readonly folder?: string\n  ) {\n    this.team = team;\n    this.format = format;\n    this.name = name;\n    this.folder = folder;\n\n    this.data = data;\n    if (format && data?.forGen) {\n      if (format.slice(0, 3) === 'gen') {\n        this.data = data.forGen(parseInt(format[3]) as GenerationNum);\n      } else {\n        this.format = `gen6${format}`;\n        this.data = data.forGen(6);\n      }\n    }\n  }\n\n  get gen() {\n    return this.data?.gen;\n  }\n\n  pack(): string {\n    return Teams.packTeam(this);\n  }\n\n  static unpack(buf: string, data?: Data) {\n    return Teams.unpackTeam(buf, data);\n  }\n\n  export(data?: Data): string {\n    let buf = '';\n    for (const s of this.team) {\n      buf += Sets.exportSet(s, data || this.data);\n    }\n    return buf;\n  }\n\n  static import(buf: string, data?: Data) {\n    return Teams.importTeam(buf, data);\n  }\n\n  toString(data?: Data) {\n    return this.export(data);\n  }\n\n  static fromString(str: string, data?: Data) {\n    const teams = Teams.importTeams(str, data, true, true);\n    return teams.length ? teams[0] : undefined;\n  }\n\n  toJSON(): string {\n    return JSON.stringify(this.team);\n  }\n\n  static fromJSON(json: string): Team<PokemonSet>|undefined {\n    if (json.charAt(0) !== '[' || json.charAt(json.length - 1) !== ']') {\n      return undefined;\n    }\n    // BUG: this is completely unvalidated...\n    const team: PokemonSet[] = JSON.parse(json);\n    return new Team<PokemonSet>(team);\n  }\n\n  static canonicalize(team: Partial<PokemonSet>[], data: Data) {\n    let lead: Partial<PokemonSet> | undefined = undefined;\n    const rest: Array<[ID, Partial<PokemonSet>]> = [];\n    for (const s of team) {\n      const set = Sets.canonicalize(s, data);\n      if (lead) {\n        rest.push([set.species as ID, set]);\n      } else {\n        lead = set;\n      }\n    }\n    return [lead!, ...rest.sort((a, b) => a[0].localeCompare(b[0])).map(([, set]) => set)];\n  }\n}\n\nexport const Teams = new class {\n  packTeam<S extends Partial<PokemonSet>>(team: Team<S>): string {\n    let buf = '';\n    for (const s of team.team) {\n      if (buf) buf += ']';\n      buf += Sets.packSet(s);\n    }\n    return buf;\n  }\n\n  unpackTeam(buf: string, data?: Data): Team<PokemonSet> | undefined {\n    if (!buf) return undefined;\n    if (buf.charAt(0) === '[' && buf.charAt(buf.length - 1) === ']') {\n      return Team.fromJSON(buf);\n    }\n\n    const team: PokemonSet[] = [];\n    let i = 0, j = 0;\n\n    for (let k = 0; k < 24; k++) {\n      const r = _unpack(buf, i, j, data);\n      if (!r.set) return undefined;\n\n      team.push(r.set);\n      i = r.i;\n      j = r.j;\n\n      if (j < 0) break;\n      i = j + 1;\n    }\n\n    return new Team<PokemonSet>(team, data);\n  }\n\n  importTeam(buf: string, data?: Data): Team|undefined {\n    const teams = Teams.importTeams(buf, data, true);\n    return teams.length ? teams[0] : undefined;\n  }\n\n  importTeams(\n    buf: string,\n    data?: Data,\n    one?: boolean,\n    builder?: boolean,\n  ): Readonly<Team<Partial<PokemonSet>>[]> {\n    const lines = buf.split('\\n');\n    if (lines.length === 1 || (lines.length === 2 && !lines[1])) {\n      const team: Team<PokemonSet>|undefined = builder\n        ? unpackLine(lines[0], data)\n        : Teams.unpackTeam(lines[0], data);\n      return team ? [team] : [];\n    }\n\n    const teams: Team<Partial<PokemonSet>>[] = [];\n\n    let setLine = -1;\n    let team: Partial<PokemonSet>[] = [];\n    for (let i = 0; i < lines.length; i++) {\n      let line = lines[i].trim();\n\n      if (line.substr(0, 3) === '===') {\n        if (one && teams.length) return teams;\n        team = [];\n        line = line.substr(3, line.length - 6).trim();\n        let format = `gen${data?.gen || CURRENT}`;\n        const bracketIndex = line.indexOf(']');\n        if (bracketIndex >= 0) {\n          format = line.substr(1, bracketIndex - 1);\n          line = line.substr(bracketIndex + 1).trim();\n        }\n\n        const slashIndex = line.lastIndexOf('/');\n        let folder = '';\n        if (slashIndex > 0) {\n          folder = line.slice(0, slashIndex);\n          line = line.slice(slashIndex + 1);\n        }\n\n        teams.push(new Team<Partial<PokemonSet>>(team, data, format, line, folder));\n      } else if (line.includes('|')) {\n        // packed format\n        const t = unpackLine(line, data);\n        if (t) teams.push(t);\n      } else if (setLine !== i) {\n        const r = _import(lines, i, data);\n        if (r.set) team.push(r.set);\n        if (r.line === i) {\n          continue;\n        }\n        // Reread the line to find out if we can process what _import couldn't\n        setLine = r.line;\n        i = setLine - 1;\n      }\n    }\n\n    // If we made it here we read in some sets but there was no '===' marker\n    // in the file so we assume only one (unnamed) team.\n    if (team.length && !teams.length) {\n      teams.push(new Team<Partial<PokemonSet>>(team, data));\n    }\n\n    return teams;\n  }\n\n  exportTeams<S extends Partial<PokemonSet>>(teams: Readonly<Team<S>[]>, data?: Data): string {\n    let buf = '';\n\n    let i = 0;\n    for (const team of teams) {\n      buf += '=== ' + (team.format ? '[' + team.format.toString() + '] ' : '') +\n          (team.folder ? '' + team.folder + '/' : '') +\n          (team.name || 'Untitled ' + ++i) + ' ===\\n\\n';\n      buf += team.export(data);\n      buf += '\\n';\n    }\n    return buf;\n  }\n\n  toString<S extends Partial<PokemonSet>>(teams: Readonly<Team<S>[]>, data?: Data): string {\n    return Teams.exportTeams(teams, data);\n  }\n\n  fromString(str: string, data?: Data): Readonly<Team<Partial<PokemonSet>>[]> {\n    return Teams.importTeams(str, data, false, true);\n  }\n};\n\nfunction unpackLine(line: string, data?: Data): Team<PokemonSet> | undefined {\n  const pipeIndex = line.indexOf('|');\n  if (pipeIndex < 0) return undefined;\n\n  let bracketIndex = line.indexOf(']');\n  if (bracketIndex > pipeIndex) bracketIndex = -1;\n\n  let slashIndex = line.lastIndexOf('/', pipeIndex);\n  // line.slice(slashIndex + 1, pipeIndex) will be ''\n  if (slashIndex < 0) slashIndex = bracketIndex;\n\n  const format = bracketIndex > 0 ? line.slice(0, bracketIndex) : `gen${data?.gen || CURRENT}`;\n  const team = Teams.unpackTeam(line.slice(pipeIndex + 1), data);\n  return !team\n    ? team\n    : new Team<PokemonSet>(\n      team.team,\n      data,\n      format,\n      line.slice(slashIndex + 1, pipeIndex),\n      line.slice(\n        bracketIndex + 1, slashIndex > 0 ? slashIndex : bracketIndex + 1\n      ),\n    );\n}\n"]}