import { GenerationNum, StatsTable, PokemonSet, StatID } from '@pkmn/types';
export { PokemonSet } from '@pkmn/types';

interface DataTable<T> {
    get(name: string): Readonly<T> | undefined;
}
interface Nature {
    name: string;
    plus?: Exclude<StatID, 'hp'>;
    minus?: Exclude<StatID, 'hp'>;
}
interface Data {
    forGen?(gen: GenerationNum): Data;
    readonly gen: GenerationNum;
    readonly abilities: DataTable<{
        name: string;
    }>;
    readonly items: DataTable<{
        name: string;
    }>;
    readonly moves: DataTable<{
        name: string;
    }>;
    readonly natures: DataTable<Nature>;
    readonly species: DataTable<{
        name: string;
        baseSpecies: string;
        baseStats: StatsTable;
        gender?: string;
        battleOnly?: string | string[];
        abilities?: {
            0: string;
            1?: string;
            H?: string;
            S?: string;
        };
        types?: string[];
        forceTeraType?: string;
    }>;
}
declare const Sets: {
    pack(s: Partial<PokemonSet>): string;
    packSet(s: Partial<PokemonSet>): string;
    exportSet(s: Partial<PokemonSet>, data?: Data): string;
    unpack(buf: string, data?: Data): PokemonSet<string> | undefined;
    unpackSet(buf: string, data?: Data): PokemonSet<string> | undefined;
    importSet(buf: string, data?: Data): Partial<PokemonSet<string>>;
    toJSON(s: PokemonSet): string;
    fromJSON(json: string): PokemonSet<string> | undefined;
    toString(s: Partial<PokemonSet>, data?: Data): string;
    fromString(str: string): Partial<PokemonSet<string>>;
    canonicalize(s: Partial<PokemonSet>, data: Data): Partial<PokemonSet<string>>;
};

declare class Team<S extends Partial<PokemonSet> = PokemonSet | Partial<PokemonSet>> {
    readonly team: S[];
    readonly data?: Data | undefined;
    readonly format?: string | undefined;
    readonly name?: string | undefined;
    readonly folder?: string | undefined;
    constructor(team: S[], data?: Data | undefined, format?: string | undefined, name?: string | undefined, folder?: string | undefined);
    get gen(): GenerationNum | undefined;
    pack(): string;
    static unpack(buf: string, data?: Data): Team<PokemonSet<string>> | undefined;
    export(data?: Data): string;
    static import(buf: string, data?: Data): Team<PokemonSet<string> | Partial<PokemonSet<string>>> | undefined;
    toString(data?: Data): string;
    static fromString(str: string, data?: Data): Team<Partial<PokemonSet<string>>> | undefined;
    toJSON(): string;
    static fromJSON(json: string): Team<PokemonSet> | undefined;
    static canonicalize(team: Partial<PokemonSet>[], data: Data): Partial<PokemonSet<string>>[];
}
declare const Teams: {
    packTeam<S extends Partial<PokemonSet<string>>>(team: Team<S>): string;
    unpackTeam(buf: string, data?: Data): Team<PokemonSet> | undefined;
    importTeam(buf: string, data?: Data): Team | undefined;
    importTeams(buf: string, data?: Data, one?: boolean, builder?: boolean): Readonly<Team<Partial<PokemonSet>>[]>;
    exportTeams<S_1 extends Partial<PokemonSet<string>>>(teams: readonly Team<S_1>[], data?: Data): string;
    toString<S_2 extends Partial<PokemonSet<string>>>(teams: readonly Team<S_2>[], data?: Data): string;
    fromString(str: string, data?: Data): Readonly<Team<Partial<PokemonSet>>[]>;
};

export { type Data, Sets, Team, Teams };
