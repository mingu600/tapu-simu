//! # Phase 1 Integration Tests
//! 
//! Comprehensive tests for Phase 1 damage calculation features using real PS data.
//! Tests weather negation, stat boosts, terrain interactions, and screen mechanics
//! with actual competitive Pokemon and moves.

use tapu_simu::TestFramework;
use tapu_simu::core::instruction::{Weather, Terrain, SideCondition};

#[test]
fn test_cloud_nine_negates_sun_fire_boost() {
    // Test Cloud Nine negating Sun weather boost for Fire moves
    let framework = TestFramework::new().expect("Failed to create test framework");

    let negates_weather = framework.test_weather_negation(
        "charizard",     // Fire attacker
        "golduck",       // Cloud Nine Pokemon
        "Cloud Nine",    // Weather negation ability
        Weather::Sun,    // Sun weather
        "flamethrower"   // Fire move that would be boosted by Sun
    ).expect("Failed to test weather negation");

    assert!(negates_weather, "Cloud Nine should negate Sun weather effects for Fire moves");
}

#[test]
fn test_air_lock_negates_rain_water_boost() {
    // Test Air Lock negating Rain weather boost for Water moves
    let framework = TestFramework::new().expect("Failed to create test framework");

    let negates_weather = framework.test_weather_negation(
        "gyarados",      // Water attacker
        "rayquaza",      // Air Lock Pokemon
        "Air Lock",      // Weather negation ability
        Weather::Rain,   // Rain weather
        "surf"           // Water move that would be boosted by Rain
    ).expect("Failed to test weather negation");

    assert!(negates_weather, "Air Lock should negate Rain weather effects for Water moves");
}

#[test]
fn test_sandstorm_rock_spdef_boost() {
    // Test Sandstorm boosting Special Defense of Rock types
    let framework = TestFramework::new().expect("Failed to create test framework");

    let damage_multiplier = framework.test_weather_stat_boost(
        "kadabra",           // Special attacker
        "onix",              // Rock-type defender
        &["Rock", "Ground"], // Rock typing for Sandstorm boost
        Weather::Sand,       // Sandstorm weather
        "psychic"            // Special move
    ).expect("Failed to test weather stat boost");

    // Should take less damage due to 1.5x SpDef boost
    assert!(damage_multiplier < 1.0, 
            "Rock types should take less special damage in Sandstorm, got {}x", damage_multiplier);
    
    // Should be approximately 0.67x damage (1 / 1.5)
    assert!((damage_multiplier - 0.67).abs() < 0.15,
            "Sandstorm SpDef boost should result in ~0.67x damage, got {}x", damage_multiplier);
}

#[test]
fn test_snow_ice_def_boost() {
    // Test Snow boosting Defense of Ice types
    let framework = TestFramework::new().expect("Failed to create test framework");

    let damage_multiplier = framework.test_weather_stat_boost(
        "machop",          // Physical attacker
        "jynx",            // Ice-type defender
        &["Ice", "Psychic"], // Ice typing for Snow boost
        Weather::Snow,     // Snow weather
        "karatechop"       // Physical move
    ).expect("Failed to test weather stat boost");

    // Should take less damage due to 1.5x Def boost
    assert!(damage_multiplier < 1.0, 
            "Ice types should take less physical damage in Snow, got {}x", damage_multiplier);
    
    // Should be approximately 0.67x damage (1 / 1.5)
    assert!((damage_multiplier - 0.67).abs() < 0.15,
            "Snow Def boost should result in ~0.67x damage, got {}x", damage_multiplier);
}

#[test]
fn test_misty_terrain_dragon_reduction() {
    // Test Misty Terrain reducing Dragon moves against grounded targets
    let framework = TestFramework::new().expect("Failed to create test framework");

    let damage_multiplier = framework.test_terrain_effects(
        "dragonite",          // Dragon attacker
        "garchomp",           // Grounded defender
        Terrain::MistyTerrain, // Misty Terrain
        "dragonpulse"         // Dragon move
    ).expect("Failed to test terrain effects");

    // Should deal 0.5x damage to grounded targets
    assert!(damage_multiplier < 1.0, 
            "Dragon moves should be reduced in Misty Terrain, got {}x", damage_multiplier);
    
    assert!((damage_multiplier - 0.5).abs() < 0.1,
            "Misty Terrain should reduce Dragon moves to 0.5x, got {}x", damage_multiplier);
}

#[test]
fn test_grassy_terrain_earthquake_reduction() {
    // Test Grassy Terrain reducing Ground moves against grounded targets
    let framework = TestFramework::new().expect("Failed to create test framework");

    let damage_multiplier = framework.test_terrain_effects(
        "garchomp",             // Ground attacker
        "tyranitar",            // Grounded defender
        Terrain::GrassyTerrain, // Grassy Terrain
        "earthquake"            // Ground move
    ).expect("Failed to test terrain effects");

    // Should deal 0.5x damage to grounded targets
    assert!(damage_multiplier < 1.0, 
            "Ground moves should be reduced in Grassy Terrain, got {}x", damage_multiplier);
    
    assert!((damage_multiplier - 0.5).abs() < 0.1,
            "Grassy Terrain should reduce Ground moves to 0.5x, got {}x", damage_multiplier);
}

#[test]
fn test_electric_terrain_boost_grounded() {
    // Test Electric Terrain boosting Electric moves for grounded attackers
    let framework = TestFramework::new().expect("Failed to create test framework");

    let damage_multiplier = framework.test_terrain_effects(
        "pikachu",               // Electric attacker (grounded)
        "gyarados",              // Defender
        Terrain::ElectricTerrain, // Electric Terrain
        "thundershock"           // Electric move
    ).expect("Failed to test terrain effects");

    // Should deal 1.3x damage in Gen 9
    assert!(damage_multiplier > 1.0, 
            "Electric moves should be boosted in Electric Terrain, got {}x", damage_multiplier);
    
    assert!((damage_multiplier - 1.3).abs() < 0.1,
            "Electric Terrain should boost Electric moves by 1.3x, got {}x", damage_multiplier);
}

#[test]
fn test_levitate_prevents_terrain_boost() {
    // Test Levitate preventing terrain boosts (ungrounded)
    let framework = TestFramework::new().expect("Failed to create test framework");

    let is_ungrounded = framework.test_grounded_immunity(
        "magnemite",             // Electric attacker
        "Levitate",              // Levitate ability (makes ungrounded)
        Terrain::ElectricTerrain, // Electric Terrain
        "thundershock"           // Electric move
    ).expect("Failed to test grounded immunity");

    assert!(is_ungrounded, "Levitate should prevent terrain boosts by making Pokemon ungrounded");
}

#[test]
fn test_reflect_physical_reduction() {
    // Test Reflect reducing physical move damage
    let framework = TestFramework::new().expect("Failed to create test framework");

    let damage_multiplier = framework.test_screen_effects(
        "machop",                // Physical attacker
        "chansey",               // Defender
        SideCondition::Reflect,  // Reflect screen
        "karatechop"             // Physical move
    ).expect("Failed to test screen effects");

    // Should deal 0.5x damage in singles
    assert!(damage_multiplier < 1.0, 
            "Reflect should reduce physical damage, got {}x", damage_multiplier);
    
    assert!((damage_multiplier - 0.5).abs() < 0.1,
            "Reflect should reduce physical moves to 0.5x in singles, got {}x", damage_multiplier);
}

#[test]
fn test_light_screen_special_reduction() {
    // Test Light Screen reducing special move damage
    let framework = TestFramework::new().expect("Failed to create test framework");

    let damage_multiplier = framework.test_screen_effects(
        "kadabra",                 // Special attacker
        "chansey",                 // Defender
        SideCondition::LightScreen, // Light Screen
        "psychic"                  // Special move
    ).expect("Failed to test screen effects");

    // Should deal 0.5x damage in singles
    assert!(damage_multiplier < 1.0, 
            "Light Screen should reduce special damage, got {}x", damage_multiplier);
    
    assert!((damage_multiplier - 0.5).abs() < 0.1,
            "Light Screen should reduce special moves to 0.5x in singles, got {}x", damage_multiplier);
}

#[test]
fn test_aurora_veil_all_reduction() {
    // Test Aurora Veil reducing both physical and special moves
    let framework = TestFramework::new().expect("Failed to create test framework");

    let physical_multiplier = framework.test_screen_effects(
        "machop",                 // Physical attacker
        "chansey",                // Defender
        SideCondition::AuroraVeil, // Aurora Veil
        "karatechop"              // Physical move
    ).expect("Failed to test screen effects");

    let special_multiplier = framework.test_screen_effects(
        "kadabra",                // Special attacker
        "chansey",                // Defender
        SideCondition::AuroraVeil, // Aurora Veil
        "psychic"                 // Special move
    ).expect("Failed to test screen effects");

    // Both should be reduced to 0.5x in singles
    assert!(physical_multiplier < 1.0 && special_multiplier < 1.0,
            "Aurora Veil should reduce both physical and special damage");
    
    assert!((physical_multiplier - 0.5).abs() < 0.1,
            "Aurora Veil should reduce physical moves to 0.5x, got {}x", physical_multiplier);
    
    assert!((special_multiplier - 0.5).abs() < 0.1,
            "Aurora Veil should reduce special moves to 0.5x, got {}x", special_multiplier);
}

#[test]
fn test_infiltrator_bypasses_reflect() {
    // Test Infiltrator bypassing Reflect screen
    let framework = TestFramework::new().expect("Failed to create test framework");

    let bypasses_screen = framework.test_infiltrator_bypass(
        "golbat",                // Infiltrator Pokemon
        "chansey",               // Defender
        SideCondition::Reflect,  // Reflect screen
        "tackle"                 // Physical move
    ).expect("Failed to test Infiltrator bypass");

    assert!(bypasses_screen, "Infiltrator should bypass Reflect and deal more damage");
}

#[test]
fn test_infiltrator_bypasses_light_screen() {
    // Test Infiltrator bypassing Light Screen
    let framework = TestFramework::new().expect("Failed to create test framework");

    let bypasses_screen = framework.test_infiltrator_bypass(
        "golbat",                 // Infiltrator Pokemon
        "chansey",                // Defender
        SideCondition::LightScreen, // Light Screen
        "psychic"                 // Special move
    ).expect("Failed to test Infiltrator bypass");

    assert!(bypasses_screen, "Infiltrator should bypass Light Screen and deal more damage");
}

#[test]
fn test_infiltrator_bypasses_aurora_veil() {
    // Test Infiltrator bypassing Aurora Veil
    let framework = TestFramework::new().expect("Failed to create test framework");

    let bypasses_screen = framework.test_infiltrator_bypass(
        "golbat",                 // Infiltrator Pokemon
        "chansey",                // Defender
        SideCondition::AuroraVeil, // Aurora Veil
        "tackle"                  // Physical move
    ).expect("Failed to test Infiltrator bypass");

    assert!(bypasses_screen, "Infiltrator should bypass Aurora Veil and deal more damage");
}